簡易数式計算機 ycalc

1. 概要

    整数,+,-,*,/,(,) からなる通常の四則演算式を1行に1個ずつ入力し
    即座にその計算結果を返すプログラム

2. 構成ファイル

    Makefile	make用定義ファイル
    ycalc.y	本体 (yacc)
    yylex.l	字句解析プログラム (lex)
    Readme	このファイル
    YaccMemo	yacc についての覚書

3. 実行ファイルの生成

    i. yacc -d ycalc.y を実行して，y.tab.c と y.tab.h を生成する．
   ii. flex yylex.l を実行して，lex.yy.c を生成する．
  iii. cc y.tab.c lex.yy.c -o ycalc を実行して，実行ファイル ycalc を
       生成する．

4. 文法定義

    S  →  SE<LF> | S<LF> | ε
    E  →  E+E | E-E | E*E | E/E | -E | (E) | <NUM>

    ※ <LF> は改行文字，<NUM> は整数

    ※ 解析木の例 (右端が root)

    ε---S---S--------S----...----S--------S
            /|       /|          /|       /|
           / |      / |         / |      / |
          E  <LF>  E  <LF>     E  <LF>  E  <LF>
          :        :           :        :

5. 実行時の動作の例

    ※ 還元などの際の動作を { } 内で表わす．

     I) ・????$			{ ???? は未入力 (未知)．}
           ↓S → ε で還元	{ プロンプト ("> ") を出力．}
    II) S・????$		{ ここでいったん入力待ち．そこへ }
   III) S・1+2\n????$		{ 例えば 1+2\n が入力されると，	 }
           ↓シフト		{ その結果，シフトが始まる．	 }
    IV) S1・+2\n????$
           ↓E → <NUM> で還元	{ トークン "1" の値 1 が
				  還元された (左辺の) E の値となる．}
     V) SE・+2\n????$
           ↓シフト × 2
    VI) SE+2・\n????$
           ↓E → <NUM> で還元	{ トークン "2" の値 2 が
				  還元された (左辺の) E の値となる．}
   VII) SE+E・\n????$
           ↓E → E+E で還元	{ 右辺の左の E の値 1 と
				  右の E の値 2 が足されて，
				  その結果の 3 が，
				  還元された (左辺の) E の値となる．}
  VIII) SE・\n????$
           ↓シフト
    IX) SE\n・????$
           ↓S → SE<LF> で還元	{ (右辺の) E の値 3 が出力され，
				  次のプロンプト ("> ") を出力．}
     X) S・????$		{ II) に戻る }

6. 課題

  (a) $ で，最後の計算結果を表せるようにせよ．例えば，
      +--------
      |> 1+2
      |3
      |> $*$
      |9
      |> $-5
      |4
      +--------
      のように使えるようにせよ．

  (b) (変数機能)
    (b-1) = 演算子を導入して，英字1文字の変数を使えるようにせよ．
    (b-2) (0以外の値を持つ)変数の内容を列挙する機能，すべての
          あるいは指定した変数をクリアする(値を0にする)機能も
          付けてみよ．

  (c) 浮動小数点数を扱えるようにしてみよ
      (ヒント: yacc の %union 宣言について調べてみよう)

7. その他

    このプログラムは三浦欽也 (miura@mail.kobe-c.ac.jp) が作成しました．
    https://wwws.kobe-c.ac.jp/~miura/stock/ycalc/ においてあります．
